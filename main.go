//Simple Malware Detection using the VirusTotal api 
package main

import (
	"fmt"
	"io/ioutil"
	"io"
	"crypto/sha256"
	"net/http"
	"encoding/json"
	"encoding/hex"
	"os"
	"log"
	"time"
)

var(
	api_key string = "<Virus Total Api Key>"
	url string = "https://www.virustotal.com/api/v3/files/"
	file_sha256 string = ""
)

type VTfileScan struct {
	Data struct {
		Attributes struct {
			TypeDescription      string   `json:"type_description"`
			Tlsh                 string   `json:"tlsh"`
			Vhash                string   `json:"vhash"`
			Names                []string `json:"names"`
			LastModificationDate int      `json:"last_modification_date"`
			TypeTag              string   `json:"type_tag"`
			TimesSubmitted       int      `json:"times_submitted"`
			TotalVotes           struct {
				Harmless  int `json:"harmless"`
				Malicious int `json:"malicious"`
			} `json:"total_votes"`
			Size                        int `json:"size"`
			PopularThreatClassification struct {
				SuggestedThreatLabel  string          `json:"suggested_threat_label"`
				PopularThreatCategory [][]interface{} `json:"popular_threat_category"`
				PopularThreatName     [][]interface{} `json:"popular_threat_name"`
			} `json:"popular_threat_classification"`
			LastSubmissionDate     int      `json:"last_submission_date"`
			Sha256                 string   `json:"sha256"`
			TypeExtension          string   `json:"type_extension"`
			Tags                   []string `json:"tags"`
			CrowdsourcedIdsResults []struct {
				RuleCategory  string `json:"rule_category"`
				AlertSeverity string `json:"alert_severity"`
				AlertContext  []struct {
					URL      string `json:"url"`
					Hostname string `json:"hostname"`
					DestIP   string `json:"dest_ip"`
					DestPort int    `json:"dest_port"`
				} `json:"alert_context"`
			} `json:"crowdsourced_ids_results"`
			LastAnalysisDate    int    `json:"last_analysis_date"`
			UniqueSources       int    `json:"unique_sources"`
			FirstSubmissionDate int    `json:"first_submission_date"`
			Sha1                string `json:"sha1"`
			Ssdeep              string `json:"ssdeep"`
			Md5                 string `json:"md5"`
			LastAnalysisStats   struct {
				Harmless         int `json:"harmless"`
				TypeUnsupported  int `json:"type-unsupported"`
				Suspicious       int `json:"suspicious"`
				ConfirmedTimeout int `json:"confirmed-timeout"`
				Timeout          int `json:"timeout"`
				Failure          int `json:"failure"`
				Malicious        int `json:"malicious"`
				Undetected       int `json:"undetected"`
			} `json:"last_analysis_stats"`
			MeaningfulName   string `json:"meaningful_name"`
			Reputation       int    `json:"reputation"`
			FirstSeenItwDate int    `json:"first_seen_itw_date"`
		} `json:"attributes"`
	} `json:"data"`
}

func getFile(){
	f, err := os.Open(os.Args[1])
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	h := sha256.New()
	if _, err := io.Copy(h, f); err != nil {
		log.Fatal(err)
	}
	file_sha256 = hex.EncodeToString(h.Sum(nil))
}


func goReq(){
	req,_ := http.NewRequest("GET",url+file_sha256,nil)
	req.Header.Add("x-apikey",api_key)
	req.Header.Add("Content-Type", "application/json")
	client := &http.Client{}
	resp, _ := client.Do(req)
	
	body, _ := ioutil.ReadAll(resp.Body)

	var result VTfileScan
	json.Unmarshal([]byte(body),&result)

	fmt.Printf("Type Description : %v\n",result.Data.Attributes.TypeDescription)
	fmt.Printf("MD5: %s\n",result.Data.Attributes.Md5)
	fmt.Printf("SHA1 : %v\n",result.Data.Attributes.Sha1)
	fmt.Printf("SHA256 : %v\n",result.Data.Attributes.Sha256)
	fmt.Printf("Detected Malicious : %v\n",result.Data.Attributes.LastAnalysisStats.Malicious)
	fmt.Printf("Undetected : %v\n",result.Data.Attributes.LastAnalysisStats.Undetected)
	fmt.Printf("Full name: %v\n",result.Data.Attributes.MeaningfulName)
	fmt.Printf("TAGS : %v\n",result.Data.Attributes.Tags)
	fmt.Printf("Threat Category : %v\n",result.Data.Attributes.PopularThreatClassification.PopularThreatCategory)
	fmt.Printf("First Submission Date : %v\n",time.Unix(int64(result.Data.Attributes.FirstSubmissionDate),0))
	fmt.Printf("Last Submission Date : %v\n",time.Unix(int64(result.Data.Attributes.LastSubmissionDate),0))
	fmt.Printf("First Seen : %v\n",time.Unix(int64(result.Data.Attributes.FirstSeenItwDate),0))
}

func main(){
	getFile()
	goReq()


}
